package me.accessmodifier364.leuxbackdoor.client.modules.exploit;

import me.accessmodifier364.leuxbackdoor.client.event.events.EventPacket;
import me.accessmodifier364.leuxbackdoor.client.guiscreen.settings.Setting;
import me.accessmodifier364.leuxbackdoor.client.modules.Category;
import me.accessmodifier364.leuxbackdoor.client.modules.Module;
import me.accessmodifier364.leuxbackdoor.client.util.MessageUtil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketMaps;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.world.storage.MapData;

public class PlayerFinder extends Module {
    public PlayerFinder() {
        super(Category.exploit);
        this.name = "PlayerFinder";
        this.description = "2021 exploit";
    }

    Setting amountPerTick = create("PacketsPetTick", "PacketsPetTick", 2, 0, 5);

    @Override
    public void update() {

        if (mc.player.inPortal && mc.player.getRidingEntity() instanceof EntityBoat) {
            if (mc.player.inventory.getCurrentItem().getItem().equals(Items.MAP))
                mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(mc.player.getPosition(), EnumFacing.UP, EnumHand.MAIN_HAND, 0, -1337.77f, 0));
            for (int i = 0; i < amountPerTick.get_value(1); i++) {
                mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, -1337.77D, mc.player.posZ, false));
                mc.player.connection.sendPacket(new CPacketSteerBoat(false, true));


            }
        }

        for (Entity entity : mc.world.playerEntities) {
            if (!entity.getName().equalsIgnoreCase(mc.player.getName())) {
                MessageUtil.send_client_message("Found A Player Kek " + entity.getPosition());
            }
        }

    }

    @EventHandler
    private final Listener<EventPacket.ReceivePacket> receivePacket = new Listener<>(event -> {
        if (event.get_packet() instanceof SPacketMaps) {
            ((SPacketMaps) event.get_packet()).setMapdataTo(new MapData("haha i get ur coords"));
        }
        if (event.get_packet() instanceof SPacketEntityVelocity || event.get_packet() instanceof SPacketEntityTeleport) {
            event.cancel();
        }
    });

    @EventHandler
    private final Listener<EventPacket.SendPacket> sendPacket = new Listener<>(event -> {
        if (event.get_packet() instanceof CPacketConfirmTeleport || event.get_packet() instanceof CPacketPlayerTryUseItem) {
            event.cancel();
        }
    });
    
}