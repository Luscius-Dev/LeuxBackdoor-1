package me.accessmodifier364.leuxbackdoor.client.modules.exploit;

import me.accessmodifier364.leuxbackdoor.client.event.EventCancellable;
import me.accessmodifier364.leuxbackdoor.client.event.events.EventPacket;
import me.accessmodifier364.leuxbackdoor.client.guiscreen.settings.Setting;
import me.accessmodifier364.leuxbackdoor.client.modules.Category;
import me.accessmodifier364.leuxbackdoor.client.modules.Module;
import me.accessmodifier364.leuxbackdoor.client.util.CrystalUtil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemEndCrystal;
import net.minecraft.item.ItemExpBottle;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.server.*;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;

import java.util.concurrent.TimeUnit;

public class GodModule extends Module {
    public GodModule() {
        super(Category.exploit);
        this.name        = "GodModule";
        this.description = "Phobos 1.9.0 instant crystal breaker";
    }

    Setting rotations = create ("Spoofs", "Spoofs", 7, 1, 20);
    Setting rotate = create("Rotate", "Rotate", true);
    Setting antiIllegal = create("AntiIllegal", "AntiIllegal", true);
    Setting checkPos = create("CheckPos", "CheckPos", true);
    Setting oneDot15 = create("1.15", "1.15", false);
    Setting entitycheck = create("EntityCheck", "EntityCheck", true);
    Setting attacks = create ("Attacks", "Attacks", 4, 1, 10);
    Setting offset = create ("Offset", "Offset", 0, 0, 2);
    Setting delay = create ("Delay", "Delay", 15, 0, 250);

    private float yaw = 0.0f;
    private float pitch = 0.0f;
    private boolean rotating;
    private int rotationPacketsSpoofed;
    private int highestID = -100000;


    @Override
    public void enable() {
        this.resetFields();
        if (mc.world != null) {
            this.updateEntityID();
        }
    }

    @Override
    public void disable() {
        this.resetFields();
        if (mc.world != null) {
            this.updateEntityID();
        }
    }

    @EventHandler
    private final Listener<EventPacket.SendPacket> listener = new Listener<>(event -> {
        CPacketPlayerTryUseItemOnBlock packet;
        if (event.get_era() == EventCancellable.Era.EVENT_PRE && event.get_packet() instanceof CPacketPlayerTryUseItemOnBlock) {
            packet = (CPacketPlayerTryUseItemOnBlock)event.get_packet();
            if (mc.player.getHeldItem(packet.hand).getItem() instanceof ItemEndCrystal) {
                if (this.checkPos.get_value(true) && !CrystalUtil.canPlaceCrystal2(packet.position, this.entitycheck.get_value(true), this.oneDot15.get_value(true)) || this.checkPlayers()) {
                    return;
                }
                this.updateEntityID();
                for (int i = 1 - this.offset.get_value(1); i <= this.attacks.get_value(1); ++i) {
                    this.attackID(packet.position, this.highestID + i);
                }
            }
        }
        CPacketPlayer packet2;
        if (event.get_era() == EventCancellable.Era.EVENT_PRE && this.rotating && this.rotate.get_value(true) && event.get_packet() instanceof CPacketPlayer) {
            packet2 = (CPacketPlayer)event.get_packet();
            packet2.yaw = this.yaw;
            packet2.pitch = this.pitch;
            ++this.rotationPacketsSpoofed;
            if (this.rotationPacketsSpoofed >= this.rotations.get_value(1)) {
                this.rotating = false;
                this.rotationPacketsSpoofed = 0;
            }
        }
    });

    private void attackID(BlockPos pos, int id) {
        Entity entity = mc.world.getEntityByID(id);
        if (entity instanceof EntityEnderCrystal || entity == null) {
            AttackThread attackThread = new AttackThread(id, pos, this.delay.get_value(1), this);
            if (this.delay.get_value(1) == 0) {
                attackThread.run();
            } else {
                attackThread.start();
            }
        }
    }

    @EventHandler
    private final Listener<EventPacket.ReceivePacket> listener2 = new Listener<>(event -> {
        if (event.get_packet() instanceof SPacketSpawnObject) {
            this.checkID(((SPacketSpawnObject)event.get_packet()).getEntityID());
        } else if (event.get_packet() instanceof SPacketSpawnExperienceOrb) {
            this.checkID(((SPacketSpawnExperienceOrb)event.get_packet()).getEntityID());
        } else if (event.get_packet() instanceof SPacketSpawnPlayer) {
            this.checkID(((SPacketSpawnPlayer)event.get_packet()).getEntityID());
        } else if (event.get_packet() instanceof SPacketSpawnGlobalEntity) {
            this.checkID(((SPacketSpawnGlobalEntity)event.get_packet()).getEntityId());
        } else if (event.get_packet() instanceof SPacketSpawnPainting) {
            this.checkID(((SPacketSpawnPainting)event.get_packet()).getEntityID());
        } else if (event.get_packet() instanceof SPacketSpawnMob) {
            this.checkID(((SPacketSpawnMob)event.get_packet()).getEntityID());
        }
    });

    private void checkID(int id) {
        if (id > this.highestID) {
            this.highestID = id;
        }
    }

    public void updateEntityID() {
        for (Entity entity : mc.world.loadedEntityList) {
            if (entity.getEntityId() <= this.highestID) continue;
            this.highestID = entity.getEntityId();
        }
    }

    private boolean checkPlayers() {
        if (this.antiIllegal.get_value(true)) {
            for (EntityPlayer player : mc.world.playerEntities) {
                if (this.checkItem(player.getHeldItemMainhand()) && this.checkItem(player.getHeldItemOffhand())) continue;
                return true;
            }
        }
        return false;
    }

    private boolean checkItem(ItemStack stack) {
        return !(stack.getItem() instanceof ItemBow) && !(stack.getItem() instanceof ItemExpBottle) && stack.getItem() != Items.STRING;
    }

    public void rotateTo(BlockPos pos) {
        float[] angle = calcAngle(mc.player.getPositionEyes(mc.getRenderPartialTicks()), new Vec3d(pos));
        this.yaw = angle[0];
        this.pitch = angle[1];
        this.rotating = true;
    }

    public static float[] calcAngle(Vec3d from, Vec3d to) {
        double difX = to.x - from.x;
        double difY = (to.y - from.y) * -1.0;
        double difZ = to.z - from.z;
        double dist = MathHelper.sqrt(difX * difX + difZ * difZ);
        return new float[]{(float)MathHelper.wrapDegrees(Math.toDegrees(Math.atan2(difZ, difX)) - 90.0), (float)MathHelper.wrapDegrees(Math.toDegrees(Math.atan2(difY, dist)))};
    }

    private void resetFields() {
        this.rotating = false;
        this.highestID = -1000000;
    }

    public static class AttackThread
            extends Thread {
        private final BlockPos pos;
        private final int id;
        private final int delay;
        private final GodModule godModule;

        public AttackThread(int idIn, BlockPos posIn, int delayIn, GodModule godModuleIn) {
            this.id = idIn;
            this.pos = posIn;
            this.delay = delayIn;
            this.godModule = godModuleIn;
        }

        @Override
        public void run() {
            try {
                if (this.delay != 0) {
                    TimeUnit.MILLISECONDS.sleep(this.delay);
                }
                mc.addScheduledTask(() -> {
                    if (mc.player != null && mc.world != null) {
                            CPacketUseEntity attack = new CPacketUseEntity();
                            attack.entityId = this.id;
                            attack.action = CPacketUseEntity.Action.ATTACK;
                            this.godModule.rotateTo(this.pos.up());
                            mc.player.connection.sendPacket(attack);
                            mc.player.connection.sendPacket(new CPacketAnimation(EnumHand.MAIN_HAND));
                    }
                });
            }
            catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}