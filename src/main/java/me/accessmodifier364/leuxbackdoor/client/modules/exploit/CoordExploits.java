package me.accessmodifier364.leuxbackdoor.client.modules.exploit;

import com.mojang.realmsclient.gui.ChatFormatting;
import me.accessmodifier364.leuxbackdoor.client.event.events.EventPacket;
import me.accessmodifier364.leuxbackdoor.client.guiscreen.settings.Setting;
import me.accessmodifier364.leuxbackdoor.client.modules.Category;
import me.accessmodifier364.leuxbackdoor.client.modules.Module;
import me.accessmodifier364.leuxbackdoor.client.util.MessageUtil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.play.server.SPacketEffect;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.Vec3d;

import java.util.HashMap;
import java.util.List;

public class CoordExploits extends Module {
    public CoordExploits() {
        super(Category.exploit);
        this.name = "CoordExploits";
        this.description = "Logs coords taken from several exploits";
    }
    Setting tp = create("TpExploit", "TpExploit", true);
    Setting lightning = create("Thunder", "Thunder", true);
    Setting portal = create("EndPortal", "EndPortal", true);
    Setting wither = create("Wither", "Wither", true);
    Setting dragon = create("Dragon", "Dragon", true);
    
    private final HashMap<Entity, Vec3d> knownPlayers = new HashMap<>();

    @EventHandler
    private final Listener<EventPacket.SendPacket> listener = new Listener<>(event -> {
        
        if (this.lightning.get_value(true) && event.get_packet() instanceof SPacketSoundEffect) {
            SPacketSoundEffect packet = (SPacketSoundEffect)event.get_packet();
            if (packet.getCategory() == SoundCategory.WEATHER && packet.getSound() == SoundEvents.ENTITY_LIGHTNING_THUNDER) {
                MessageUtil.send_client_message(ChatFormatting.RED.toString() + "Lightning spawned at X" + packet.getX() + " Z" + packet.getZ());
            }
        }
        
        if (event.get_packet() instanceof SPacketEffect) {
            SPacketEffect packet2 = (SPacketEffect)event.get_packet();
            if (this.portal.get_value(true) && packet2.getSoundType() == 1038) {
                MessageUtil.send_client_message(ChatFormatting.RED.toString() + "End Portal activated at X" + packet2.getSoundPos().getX() + " Y" + packet2.getSoundPos().getY() + " Z" + packet2.getSoundPos().getZ());
            }
            if (this.wither.get_value(true) && packet2.getSoundType() == 1023) {
                MessageUtil.send_client_message(ChatFormatting.RED.toString() + "Wither spawned at X" + packet2.getSoundPos().getX() + " Y" + packet2.getSoundPos().getY() + " Z" + packet2.getSoundPos().getZ());
            }
            if (this.dragon.get_value(true) && packet2.getSoundType() == 1028) {
                MessageUtil.send_client_message(ChatFormatting.RED.toString() + "Dragon killed at X" + packet2.getSoundPos().getX() + " Y" + packet2.getSoundPos().getY() + " Z" + packet2.getSoundPos().getZ());
            }
        }
        
    });

    @Override
    public void update() {
        if (!this.tp.get_value(true) || mc.player == null) {
            return;
        }

        final List<Entity> tickEntityList = mc.world.getLoadedEntityList();
        for (final Entity entity : tickEntityList) {
            if (entity instanceof EntityPlayer && !entity.getName().equals(mc.player.getName())) {
                final Vec3d targetPos = new Vec3d(entity.posX, entity.posY, entity.posZ);
                if (this.knownPlayers.containsKey(entity)) {
                    if (Math.abs(mc.player.getPositionVector().distanceTo(targetPos)) >= 128.0 && this.knownPlayers.get(entity).distanceTo(targetPos) >= 64.0) {
                        MessageUtil.send_client_message(ChatFormatting.RED.toString() + "Player " + entity.getName() + " moved to Position " + targetPos.toString());
                    }
                }
                this.knownPlayers.put(entity, targetPos);
            }
        }
    }
}