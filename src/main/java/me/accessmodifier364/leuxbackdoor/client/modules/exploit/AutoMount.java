package me.accessmodifier364.leuxbackdoor.client.modules.exploit;

import me.accessmodifier364.leuxbackdoor.client.event.events.EventPacket;
import me.accessmodifier364.leuxbackdoor.client.guiscreen.settings.Setting;
import me.accessmodifier364.leuxbackdoor.client.modules.Category;
import me.accessmodifier364.leuxbackdoor.client.modules.Module;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.entity.passive.*;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;

import java.util.Comparator;

public class AutoMount extends Module {
    public AutoMount() {
        super(Category.exploit);
        this.name        = "AutoMount";
        this.description = "Automatically attempts to mount an entity near you";
    }

    Setting mountByPass = create("MountByPass", "MountByPass", false);
    Setting Horses = create("Horses", "Horses", true);
    Setting Llamas = create("Llamas", "Llamas", true);
    Setting Donkeys = create("Donkeys", "Donkeys", true);
    Setting SkeletonHorses = create("SkeletonHorses", "SkeletonHorses", false);
    Setting Boats = create("Boats", "Boats", false);
    Setting Pigs = create("Pigs", "Pigs", false);
    Setting Range = create("Range", "Range", 5, 0, 6);
    Setting Delay = create("Delay", "Delay", 10, 0, 20);

    private int counter;

    @EventHandler
    private final Listener<EventPacket.SendPacket> listener = new Listener<>(event -> {
        if (mountByPass.get_value(true)) {
            if (event.get_packet() instanceof CPacketUseEntity) {
                CPacketUseEntity packet = (CPacketUseEntity) event.get_packet();
                if (packet.getEntityFromWorld(mc.world) instanceof AbstractChestHorse) {
                    if (packet.getAction() == CPacketUseEntity.Action.INTERACT_AT) {
                        event.cancel();
                    }
                }
            }
        }
    });

    @Override
    public void update() {
        if (mc.player.isRiding()) return;

        if (counter >= Delay.get_value(1) * 20) {
            Entity l_Entity = mc.world.loadedEntityList.stream()
                    .filter(p_Entity -> isValidEntity(p_Entity))
                    .min(Comparator.comparing(p_Entity -> mc.player.getDistance(p_Entity)))
                    .orElse(null);
            if (l_Entity != null) {
                mc.playerController.interactWithEntity(mc.player, l_Entity, EnumHand.MAIN_HAND);
                counter = 0;
            }
        }
        ++counter;
    }

    private boolean isValidEntity(Entity entity) {
        if (entity.getDistance(mc.player) > Range.get_value(1)) return false;

        if (entity instanceof AbstractHorse) {
            AbstractHorse horse = (AbstractHorse) entity;
            if (horse.isChild()) return false;
        }

        if (entity instanceof EntityBoat && Boats.get_value(true))
            return true;

        if (entity instanceof EntitySkeletonHorse && SkeletonHorses.get_value(true))
            return true;

        if (entity instanceof EntityHorse && Horses.get_value(true))
            return true;

        if (entity instanceof EntityDonkey && Donkeys.get_value(true))
            return true;

        if (entity instanceof EntityPig && Pigs.get_value(true)) {
            EntityPig pig = (EntityPig) entity;
            return pig.getSaddled();
        }

        if (entity instanceof EntityLlama && Llamas.get_value(true)) {
            EntityLlama l_Llama = (EntityLlama) entity;
            return !l_Llama.isChild();
        }
        return false;
    }
}
