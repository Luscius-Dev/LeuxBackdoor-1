package me.accessmodifier364.leuxbackdoor.client.modules.exploit;

import me.accessmodifier364.leuxbackdoor.client.event.events.EventMove;
import me.accessmodifier364.leuxbackdoor.client.guiscreen.settings.Setting;
import me.accessmodifier364.leuxbackdoor.client.modules.Category;
import me.accessmodifier364.leuxbackdoor.client.modules.Module;
import me.accessmodifier364.leuxbackdoor.client.util.Timer;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.block.BlockChest;
import net.minecraft.client.gui.inventory.GuiScreenHorseInventory;
import net.minecraft.entity.Entity;
import net.minecraft.entity.passive.AbstractChestHorse;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemShulkerBox;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import org.lwjgl.input.Keyboard;

import java.util.Comparator;

public class AutoSalDupe extends Module {
    public AutoSalDupe() {
        super(Category.exploit);
        this.name = "AutoSalDupe";
        this.description = "performs the salc1 treemc dupe automatically";
    }

    Setting shulkerOnly = create("OnlyShulkers", "AutoDupeShulkerOnly", true);
    Setting hitGround = create("GroundCheck", "AutoDupeGround", true);
    Setting Delay = create("Delay", "AutoDupeDelay", 1.52, 0.15, 10.0);

    private boolean doDrop = false;
    private boolean doChest = false;
    private boolean doSneak = false;
    private boolean start = false;
    private boolean finished = false;
    private boolean grounded = false;
    private int itemsToDupe;
    private int itemsMoved;
    private int itemsDropped;
    private GuiScreenHorseInventory l_Chest;
    private final me.accessmodifier364.leuxbackdoor.client.util.Timer timer = new Timer();
    private boolean noBypass = false;

    @EventHandler
    private final Listener<EventMove> updateListener = new Listener<>(p_Event -> {
        if (Keyboard.isKeyDown(1)) {
            toggle();
            return;
        }
        if (finished) {
            finished = false;
            itemsMoved = 0;
            itemsDropped = 0;
            start = true;
            return;
        }
        if (timer.passed((float)Delay.get_value(0) * 100.0f)) {
            return;
        }
        timer.reset();
        if (doSneak) {
            if (!mc.player.isSneaking()) {
                mc.gameSettings.keyBindSneak.pressed = true;
                return;
            }
            mc.gameSettings.keyBindSneak.pressed = false;
            doSneak = false;
            if (!hitGround.get_value(true)) {
                finished = true;
            } else {
                grounded = true;
            }
            return;
        }
        if (grounded && mc.player.onGround) {
            grounded = false;
            finished = true;
            return;
        }
        if (start && is_active()) {
            itemsToDupe = 0;
            itemsMoved = 0;
            Entity l_Entity = mc.world.loadedEntityList.stream().filter(this::isValidEntity).min(Comparator.comparing(p_Entity -> mc.player.getDistance(p_Entity))).orElse(null);
            if (l_Entity instanceof AbstractChestHorse) {
                AbstractChestHorse l_entity = (AbstractChestHorse)l_Entity;
                if (!l_entity.hasChest()) {
                    int l_Slot = getChestInHotbar();
                    if (l_Slot != -1 && mc.player.inventory.currentItem != l_Slot) {
                        mc.player.inventory.currentItem = l_Slot;
                        mc.playerController.updateController();
                    } else {
                        if (mc.player.inventory.currentItem != l_Slot) {
                            toggle();
                            return;
                        }
                    }
                    mc.playerController.interactWithEntity(mc.player, l_entity, EnumHand.MAIN_HAND);
                }
                start = false;
                mc.playerController.interactWithEntity(mc.player, l_entity, EnumHand.MAIN_HAND);
                mc.player.sendHorseInventory();
                doChest = true;
            }
        }
        if (doChest && !(mc.currentScreen instanceof GuiScreenHorseInventory)) {
            doChest = false;
            start = true;
            return;
        }
        if (mc.currentScreen instanceof GuiScreenHorseInventory) {
            l_Chest = (GuiScreenHorseInventory)mc.currentScreen;
            itemsToDupe = getItemsToDupe();
            for (int l_I = 2; l_I < l_Chest.horseInventory.getSizeInventory() + 1; ++l_I) {
                ItemStack l_Stack = l_Chest.horseInventory.getStackInSlot(l_I);
                if ((itemsToDupe == 0 || itemsMoved == l_Chest.horseInventory.getSizeInventory() - 2) && doChest || itemsDropped >= itemsMoved && doDrop) break;
                if ((l_Stack.isEmpty() || l_Stack.getItem() == Items.AIR) && doChest) {
                    HandleStoring(l_Chest.inventorySlots.windowId, l_Chest.horseInventory.getSizeInventory() - 9);
                    --itemsToDupe;
                    itemsMoved = getItemsInRidingEntity();
                    return;
                }
                if (doChest || shulkerOnly.get_value(true) && !(l_Stack.getItem() instanceof ItemShulkerBox) || l_Stack.isEmpty() || !doDrop) continue;
                if (canStore()) {
                    mc.playerController.windowClick(mc.player.openContainer.windowId, l_I, 0, ClickType.QUICK_MOVE, mc.player);
                } else {
                    mc.playerController.windowClick(l_Chest.inventorySlots.windowId, l_I, -999, ClickType.THROW, mc.player);
                }
                ++itemsDropped;
                return;
            }
            if (doChest) {
                doChest = false;
                doDupe();
                return;
            }
            if (doDrop) {
                doDrop = false;
                mc.player.closeScreen();
                mc.gameSettings.keyBindSneak.pressed = true;
                doSneak = true;
            }
        }
    });

    @EventHandler
    private final Listener<EntityJoinWorldEvent> OnWorldEvent = new Listener<>(p_Event -> {
        if (p_Event.getEntity() == mc.player) {
            toggle();
        }
    });

    @Override
    public void enable() {
        super.enable();
        timer.reset();
        start = true;
    }

    @Override
    public void disable() {
        super.disable();
        noBypass = false;
        doDrop = false;
        doChest = false;
        doSneak = false;
        start = false;
        finished = false;
        grounded = false;
        itemsToDupe = 0;
        itemsMoved = 0;
        itemsDropped = 0;
        timer.reset();
    }

    private boolean isValidEntity(Entity entity) {
        if (entity instanceof AbstractChestHorse) {
            AbstractChestHorse l_ChestHorse = (AbstractChestHorse)entity;
            return !l_ChestHorse.isChild() && l_ChestHorse.isTame();
        }
        return false;
    }

    private int getChestInHotbar() {
        for (int i = 0; i < 9; ++i) {
            ItemStack stack = mc.player.inventory.getStackInSlot(i);
            if (stack == ItemStack.EMPTY || !(stack.getItem() instanceof ItemBlock) || !(((ItemBlock)stack.getItem()).getBlock() instanceof BlockChest)) continue;
            return i;
        }
        return -1;
    }

    private void HandleStoring(int p_WindowId, int p_Slot) {
        for (int l_Y = 9; l_Y < mc.player.inventoryContainer.inventorySlots.size() - 1; ++l_Y) {
            ItemStack l_InvStack = mc.player.inventoryContainer.getSlot(l_Y).getStack();
            if (l_InvStack.isEmpty() || l_InvStack.getItem() == Items.AIR || !(l_InvStack.getItem() instanceof ItemShulkerBox) && shulkerOnly.get_value(true)) continue;
            mc.playerController.windowClick(p_WindowId, l_Y + p_Slot, 0, ClickType.QUICK_MOVE, mc.player);
            return;
        }
    }

    private void doDupe() {
        noBypass = true;
        Entity l_Entity = mc.world.loadedEntityList.stream().filter(this::isValidEntity).min(Comparator.comparing(p_Entity -> mc.player.getDistance(p_Entity))).orElse(null);
        if (l_Entity instanceof AbstractChestHorse) {
            mc.player.connection.sendPacket(new CPacketUseEntity(l_Entity, EnumHand.MAIN_HAND, l_Entity.getPositionVector()));
            noBypass = false;
            doDrop = true;
        }
    }

    private int getItemsToDupe() {
        int i = 0;
        for (int l_Y = 9; l_Y < mc.player.inventoryContainer.inventorySlots.size() - 1; ++l_Y) {
            ItemStack l_InvStack = mc.player.inventoryContainer.getSlot(l_Y).getStack();
            if (l_InvStack.isEmpty() || l_InvStack.getItem() == Items.AIR || !(l_InvStack.getItem() instanceof ItemShulkerBox) && shulkerOnly.get_value(true)) continue;
            ++i;
        }
        if (i > l_Chest.horseInventory.getSizeInventory() - 1) {
            i = l_Chest.horseInventory.getSizeInventory() - 1;
        }
        return i;
    }

    private int getItemsInRidingEntity() {
        int i = 0;
        for (int l_I = 2; l_I < l_Chest.horseInventory.getSizeInventory() + 1; ++l_I) {
            ItemStack l_ItemStack = l_Chest.horseInventory.getStackInSlot(l_I);
            if (l_ItemStack.isEmpty() || l_ItemStack.getItem() == Items.AIR) continue;
            ++i;
        }
        return i;
    }

    private boolean canStore() {
        for (int l_Y = 9; l_Y < mc.player.inventoryContainer.inventorySlots.size() - 1; ++l_Y) {
            ItemStack l_InvStack = mc.player.inventoryContainer.getSlot(l_Y).getStack();
            if (!l_InvStack.isEmpty() && l_InvStack.getItem() != Items.AIR) continue;
            return true;
        }
        return false;
    }

    public boolean ignoreMountBypass() {
        return noBypass;
    }
}