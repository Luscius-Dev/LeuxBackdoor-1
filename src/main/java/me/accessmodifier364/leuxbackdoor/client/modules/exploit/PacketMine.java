package me.accessmodifier364.leuxbackdoor.client.modules.exploit;

import me.accessmodifier364.leuxbackdoor.client.event.events.EventDamageBlock;
import me.accessmodifier364.leuxbackdoor.client.event.events.EventRender;
import me.accessmodifier364.leuxbackdoor.client.guiscreen.settings.Setting;
import me.accessmodifier364.leuxbackdoor.client.modules.Category;
import me.accessmodifier364.leuxbackdoor.client.modules.Module;
import me.accessmodifier364.leuxbackdoor.client.util.turok.TurokTick;
import me.accessmodifier364.leuxbackdoor.client.util.turok.draw.RenderHelp;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;

public class PacketMine extends Module {
    public PacketMine() {
        super(Category.exploit);
        this.name = "PacketMine";
        this.description = "using packets to mine";
    }

    Setting render_break = create("Render", "Render", true);
    Setting render_mode = create("Render Mode", "Mode", "Both", combobox("Quads", "Lines", "Both"));
    Setting breakingRed = create("Breaking Red", "BreakingRed", 255, 0, 255);
    Setting breakingGreen = create("Breaking Green", "BreakingGreen", 255, 0, 255);
    Setting breakingBlue = create("Breaking Blue", "BreakingBlue", 0, 0, 255);
    Setting breakingAlpha = create("Breaking Alpha", "BreakingAlpha", 70, 0, 255);
    Setting doneRed = create("Done Red", "DoneRed", 0, 0, 255);
    Setting doneGreen = create("Done Green", "DoneGreen", 255, 0, 255);
    Setting doneBlue = create("Done Blue", "DoneBlue", 0, 0, 255);
    Setting doneAlpha = create("Done Alpha", "DoneAlpha", 70, 0, 255);
    Setting outline = create("Outline", "Outline", 255, 0, 255);

    private BlockPos current_break;
    private final TurokTick time = new TurokTick();

    @EventHandler
    private final Listener<EventDamageBlock> on_damage_block = new Listener<>(event -> {
        if (!can_break(event.getPos())) {
            current_break = null;
            return;
        }
        current_break = event.getPos();
        mc.player.swingArm(EnumHand.MAIN_HAND);
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getPos(), event.getDirection()));
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getPos(), event.getDirection()));
        event.cancel();
    });

    @Override
    public void render(EventRender event) {
        if (render_break.get_value(true)) {
            if (current_break != null) {
                if (mc.world.getBlockState(current_break).getBlock().equals(Blocks.ENDER_CHEST)) {
                    if (time.isPassedMS(550.0f)) {
                        if (render_mode.in("Quads")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), doneAlpha.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Lines")) {
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Both")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), doneAlpha.get_value(1), "all");
                            RenderHelp.release();
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        }
                    } else {
                        if (render_mode.in("Quads")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), breakingAlpha.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Lines")) {
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Both")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), breakingAlpha.get_value(1), "all");
                            RenderHelp.release();
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        }
                    }
                } else {
                    if (time.isPassedMS(1500.0f)) {
                        if (render_mode.in("Quads")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), doneAlpha.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Lines")) {
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Both")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), doneAlpha.get_value(1), "all");
                            RenderHelp.release();
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, doneRed.get_value(1), doneGreen.get_value(1), doneBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        }
                    } else {
                        if (render_mode.in("Quads")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), breakingAlpha.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Lines")) {
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        } else if (render_mode.in("Both")) {
                            RenderHelp.prepare("quads");
                            RenderHelp.draw_cube(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), breakingAlpha.get_value(1), "all");
                            RenderHelp.release();
                            RenderHelp.prepare("lines");
                            RenderHelp.draw_cube_line(RenderHelp.get_buffer_build(), current_break.getX(), current_break.getY(), current_break.getZ(), 1.0f, 1.0f, 1.0f, breakingRed.get_value(1), breakingGreen.get_value(1), breakingBlue.get_value(1), outline.get_value(1), "all");
                            RenderHelp.release();
                        }
                    }
                }

                if (mc.world.getBlockState(current_break).getBlock() == Blocks.AIR) {
                    current_break = null;
                }
            } else {
                time.reset();
            }
        }
    }

    private boolean can_break(BlockPos pos) {
        IBlockState blockState = mc.world.getBlockState(pos);
        Block block = blockState.getBlock();
        return block.getBlockHardness(blockState, mc.world, pos) != -1.0f;
    }

}